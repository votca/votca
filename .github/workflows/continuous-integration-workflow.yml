name: CI
on:
  push:
    branches:
      - master
      - stable
  pull_request:
    branches:
      - master
      - stable
  schedule:
    - cron:  '0 5 * * FRI'

jobs:
  CI:
    # Ubuntu devel, Fedora Rawhide and some other in the matrix are allowed to fail, so continue with other builds
    continue-on-error: ${{ matrix.distro == 'ubuntu:devel' || matrix.distro == 'opensuse:latest' || matrix.distro == 'fedora:rawhide' || matrix.continue-on-error == true }}
    strategy:
      matrix:
        distro: ['fedora:latest', 'fedora:rawhide', 'opensuse:latest', 'ubuntu:latest', 'ubuntu:devel', 'ubuntu:rolling', 'fedora:intel']
        toolchain: [gnu, clang]
        cmake_build_type: [Release, Debug]
        minimal: [false]
        own_gmx: [false]
        module_build: [false]
        coverage: [false]
        deploy: [false]
        include:
          - distro: 'fedora:latest'
            toolchain: gnu
            cmake_build_type: Release
            minimal: false
            own_gmx: false
            module_build: false
            coverage: false
            # make sure there is only one build deploying
            deploy: true
            no_regression_testing: true
          - distro: 'fedora:nogmx'
            toolchain: gnu
            cmake_build_type: Release
            minimal: true
          - distro: 'fedora:nogmx'
            toolchain: clang
            cmake_build_type: Release
            minimal: true
          - distro: 'fedora:nogmx'
            toolchain: gnu
            cmake_build_type: Release
            own_gmx: true
          - distro: 'fedora:latest'
            toolchain: gnu
            cmake_build_type: Release
            minimal: false
            own_gmx: false
            module_build: true
            coverage: false
            deploy: false
          - distro: 'fedora:intel'
            toolchain: intel
            cmake_build_type: Release
          - distro: 'fedora:intel'
            toolchain: intel
            cmake_build_type: Debug
          - distro: 'fedora:intel-oneapi'
            toolchain: intel-oneapi
            cmake_build_type: Release
          - distro: 'fedora:intel-oneapi'
            toolchain: intel-oneapi
            cmake_build_type: Debug
          - distro: 'fedora:gmx2019'
            toolchain: gnu
            cmake_build_type: Release
          - distro: 'fedora:gmx2019'
            toolchain: clang
            cmake_build_type: Release
          - distro: 'fedora:gmx2019_d'
            toolchain: gnu
            cmake_build_type: Release
          - distro: 'fedora:gmx2019_d'
            toolchain: clang
            cmake_build_type: Release
          - distro: 'fedora:gmx2020'
            toolchain: gnu
            cmake_build_type: Release
            no_regression_testing: true
          - distro: 'fedora:gmx2020'
            toolchain: clang
            cmake_build_type: Release
            no_regression_testing: true
          - distro: 'fedora:gmx2020_d'
            toolchain: gnu
            cmake_build_type: Release
            no_regression_testing: true
          - distro: 'fedora:gmx2020_d'
            toolchain: clang
            cmake_build_type: Release
            no_regression_testing: true
          - distro: 'fedora:gmx2021'
            toolchain: gnu
            cmake_build_type: Release
            no_regression_testing: true
          - distro: 'fedora:gmx2021'
            toolchain: clang
            cmake_build_type: Release
            no_regression_testing: true
          - distro: 'fedora:gmx2021_d'
            toolchain: gnu
            cmake_build_type: Release
            no_regression_testing: true
          - distro: 'fedora:gmx2021_d'
            toolchain: clang
            cmake_build_type: Release
            no_regression_testing: true
          - distro: 'fedora:gmx9999'
            toolchain: gnu
            cmake_build_type: Release
            continue-on-error: true
            no_regression_testing: true
          - distro: 'fedora:gmx9999'
            toolchain: clang
            cmake_build_type: Release
            continue-on-error: true
            no_regression_testing: true
          - distro: 'fedora:gmx9999_d'
            toolchain: gnu
            cmake_build_type: Release
            continue-on-error: true
            no_regression_testing: true
          - distro: 'fedora:gmx9999_d'
            toolchain: clang
            cmake_build_type: Release
            continue-on-error: true
            no_regression_testing: true
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/votca/buildenv/${{ matrix.distro }}
      # https://bugzilla.redhat.com/show_bug.cgi?id=1900021
      options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Run Votca Setup
        id: setup #use this id below to use outputs
        uses: votca/actions/setup@master
        with:
          distro: ${{ matrix.distro }}
          toolchain: ${{ matrix.toolchain }}
          minimal: ${{ matrix.minimal == true }}
          module: ${{ matrix.module_build == true }}
          own_gmx: ${{ matrix.own_gmx == true }}
          regression_testing: ${{ matrix.no_regression_testing != true }}
          coverage: ${{ matrix.coverage }}
          cmake_build_type: ${{ matrix.cmake_build_type }}
          ctest_args: ${{ matrix.ctest_args }}
          cmake_args: ${{ matrix.cmake_args }}
      - uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ steps.setup.outputs.cache_key }}
          restore-keys: ${{ steps.setup.outputs.cache_restore_key }}
      - name: CMake
        run: cmake -B builddir ${{ steps.setup.outputs.cmake_args }} .
      - name: Build
        run: |
          ccache -z
          cmake --build builddir -- -j ${{ steps.setup.outputs.jobs }}
          ccache -s
      - name: Tests
        run: ctest --output-on-failure ${{ steps.setup.outputs.ctest_args }}
        working-directory: builddir
      - name: Doxygen
        if: ${{ ! matrix.module_build }}
        run: cmake --build builddir --target doxygen
      - name: Build Sphinx
        if: ${{ steps.setup.outputs.build_sphinx == 'true' }}
        run: cmake --build builddir --target doc
      - name: Test DESTDIR Install
        if: ${{ ! matrix.module_build }}
        run: DESTDIR=${PWD}/install cmake --build builddir --target install && rm -rf ${PWD}/install/usr && rmdir ${PWD}/install
      - name: Install
        run: sudo cmake --build builddir --target install
      - name: Check Formatting
        if: ${{ steps.setup.outputs.check_format == 'true' }}
        run: cmake --build builddir --target format && git diff --submodule=diff --exit-code
      - name: Checkout Doxygen repo
        if: ${{ matrix.deploy }}
        uses: actions/checkout@v2
        with:
          repository: votca/doxygen
          path: builddir/devdoc
          token: ${{ secrets.VOTCA_BOT_TOKEN || github.token }}
      - name: Checkout Website repo
        if: ${{ matrix.deploy }}
        uses: actions/checkout@v2
        with:
          repository: votca/votca.github.io
          path: builddir/userdoc
          token: ${{ secrets.VOTCA_BOT_TOKEN || github.token }}
      - name: Deploy Doxygen and Website
        if: ${{ matrix.deploy && steps.setup.outputs.build_sphinx == 'true' }}
        run: ${GITHUB_WORKSPACE}/.github/workflows/deploy.sh
        working-directory: builddir
