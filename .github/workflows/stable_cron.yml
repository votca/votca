# This is to workaround the issue in https://github.com/orgs/community/discussions/16107
name: Stable Cron
on:
  workflow_dispatch:
  schedule:
    - cron:  '0 5 * * SAT'

jobs:
  CI:
    # Ubuntu devel, Fedora Rawhide and some other in the matrix are allowed to fail, so continue with other builds
    continue-on-error: ${{ matrix.distro == 'ubuntu:devel' || matrix.distro == 'opensuse:latest' || matrix.distro == 'fedora:rawhide' || matrix.continue-on-error == true }}
    strategy:
      matrix:
        distro: ['fedora:latest', 'fedora:rawhide', 'opensuse:latest', 'ubuntu:latest', 'ubuntu:devel', 'ubuntu:rolling', 'fedora:intel']
        toolchain: [gnu, clang]
        cmake_build_type: [Release, Debug]
        minimal: [false]
        own_gmx: [false]
        module_build: [false]
        coverage: [false]
        deploy: [false]
        include:
          - distro: 'fedora:latest'
            toolchain: gnu
            cmake_build_type: Release
            minimal: false
            own_gmx: false
            module_build: false
            coverage: false
            # make sure there is only one build deploying
            deploy: true
          - distro: 'fedora:nogmx'
            toolchain: gnu
            cmake_build_type: Release
            minimal: true
          - distro: 'fedora:nogmx'
            toolchain: clang
            cmake_build_type: Release
            minimal: true
          - distro: 'fedora:nogmx'
            toolchain: gnu
            cmake_build_type: Release
            own_gmx: true
          - distro: 'fedora:latest'
            toolchain: gnu
            cmake_build_type: Release
            minimal: false
            own_gmx: false
            module_build: true
            coverage: false
            deploy: false
          - distro: 'fedora:intel'
            toolchain: intel
            cmake_build_type: Release
            continue-on-error: true
          - distro: 'fedora:intel'
            toolchain: intel
            cmake_build_type: Debug
            continue-on-error: true
          - distro: 'fedora:intel'
            toolchain: intel-oneapi
            cmake_build_type: Release
          - distro: 'fedora:intel'
            toolchain: intel-oneapi
            cmake_build_type: Debug
          - distro: 'fedora:gmx2019'
            toolchain: gnu
            cmake_build_type: Release
          - distro: 'fedora:gmx2019'
            toolchain: clang
            cmake_build_type: Release
          - distro: 'fedora:gmxpkg'
            toolchain: gnu
            cmake_build_type: Release
          - distro: 'fedora:gmxpkg'
            toolchain: clang
            cmake_build_type: Release
          - distro: 'fedora:gmx2022'
            toolchain: gnu
            cmake_build_type: Release
          - distro: 'fedora:gmx2022'
            toolchain: clang
            cmake_build_type: Release
          - distro: 'fedora:gmx2022_d'
            toolchain: gnu
            cmake_build_type: Release
          - distro: 'fedora:gmx2022_d'
            toolchain: clang
            cmake_build_type: Release
          - distro: 'fedora:gmx9999'
            toolchain: gnu
            cmake_build_type: Release
            continue-on-error: true
          - distro: 'fedora:gmx9999'
            toolchain: clang
            cmake_build_type: Release
            continue-on-error: true
          - distro: 'fedora:gmx9999_d'
            toolchain: gnu
            cmake_build_type: Release
            continue-on-error: true
          - distro: 'fedora:gmx9999_d'
            toolchain: clang
            cmake_build_type: Release
            continue-on-error: true
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/votca/buildenv/${{ matrix.distro }}
      # https://bugzilla.redhat.com/show_bug.cgi?id=1900021
      options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: stable
      - name: Run Votca Setup
        id: setup #use this id below to use outputs
        uses: ./.github/actions/setup
        with:
          distro: ${{ matrix.distro }}
          toolchain: ${{ matrix.toolchain }}
          minimal: ${{ matrix.minimal == true }}
          module: ${{ matrix.module_build == true }}
          own_gmx: ${{ matrix.own_gmx == true }}
          regression_testing: ${{ matrix.deploy != true }}
          coverage: ${{ matrix.coverage }}
          cmake_build_type: ${{ matrix.cmake_build_type }}
          ctest_args: ${{ matrix.ctest_args }}
          cmake_args: ${{ matrix.cmake_args }}
          branch: stable
      - uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ steps.setup.outputs.cache_key }}
          restore-keys: ${{ steps.setup.outputs.cache_restore_key }}
      - name: CMake
        run: cmake -B builddir -S . ${{ steps.setup.outputs.cmake_args }}
      - name: Build
        run: |
          ccache -z
          cmake --build builddir -- -j ${{ steps.setup.outputs.jobs }}
          ccache -s
      - name: Tests
        run: ctest --output-on-failure ${{ steps.setup.outputs.ctest_args }}
        working-directory: builddir
      - name: Doxygen
        if: ${{ ! matrix.module_build }}
        run: cmake --build builddir --target doxygen
      - name: Build Sphinx
        if: ${{ steps.setup.outputs.build_sphinx == 'true' }}
        run: cmake --build builddir --target doc
      - name: Test DESTDIR Install
        if: ${{ ! matrix.module_build }}
        run: DESTDIR=${PWD}/install cmake --build builddir --target install && rm -rf ${PWD}/install/usr && rmdir ${PWD}/install
      - name: Install
        run: sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH cmake --build builddir --target install
      - name: Check Formatting
        if: ${{ steps.setup.outputs.check_format == 'true' }}
        run: cmake --build builddir --target format && git diff --exit-code
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: votca
          ref: stable
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          # username do not matter, but needs to be a secret, so it gets nulled out on PR from forks
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.VOTCA_BOT_TOKEN }}
      - name: Login to Gitlab Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_REGISTRY_USERNAME }}
          password: ${{ secrets.GITLAB_REGISTRY_TOKEN }}
      - name: Build and Push Docker images for all Container Registries
        uses: docker/build-push-action@v3
        with:
          tags: |
            votca/votca:stable
            ghcr.io/votca/votca:stable
            registry.gitlab.com/votca/votca:stable
          file: votca/.github/workflows/Dockerfile
          context: .
          pull: true
          push: ${{ github.event_name == 'push' ||  github.event_name == 'schedule' }}
